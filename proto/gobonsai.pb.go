// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        (unknown)
// source: gobonsai.proto

package gobonsai

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSensorRequest) Reset() {
	*x = ListSensorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gobonsai_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorRequest) ProtoMessage() {}

func (x *ListSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gobonsai_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorRequest.ProtoReflect.Descriptor instead.
func (*ListSensorRequest) Descriptor() ([]byte, []int) {
	return file_gobonsai_proto_rawDescGZIP(), []int{0}
}

type SensorValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SensorValue) Reset() {
	*x = SensorValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gobonsai_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorValue) ProtoMessage() {}

func (x *SensorValue) ProtoReflect() protoreflect.Message {
	mi := &file_gobonsai_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorValue.ProtoReflect.Descriptor instead.
func (*SensorValue) Descriptor() ([]byte, []int) {
	return file_gobonsai_proto_rawDescGZIP(), []int{1}
}

func (x *SensorValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type StopPumpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PumpId int32 `protobuf:"varint,1,opt,name=pumpId,proto3" json:"pumpId,omitempty"`
}

func (x *StopPumpsRequest) Reset() {
	*x = StopPumpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gobonsai_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPumpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPumpsRequest) ProtoMessage() {}

func (x *StopPumpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gobonsai_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPumpsRequest.ProtoReflect.Descriptor instead.
func (*StopPumpsRequest) Descriptor() ([]byte, []int) {
	return file_gobonsai_proto_rawDescGZIP(), []int{2}
}

func (x *StopPumpsRequest) GetPumpId() int32 {
	if x != nil {
		return x.PumpId
	}
	return 0
}

type StopPumpsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *StopPumpsReply) Reset() {
	*x = StopPumpsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gobonsai_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPumpsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPumpsReply) ProtoMessage() {}

func (x *StopPumpsReply) ProtoReflect() protoreflect.Message {
	mi := &file_gobonsai_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPumpsReply.ProtoReflect.Descriptor instead.
func (*StopPumpsReply) Descriptor() ([]byte, []int) {
	return file_gobonsai_proto_rawDescGZIP(), []int{3}
}

func (x *StopPumpsReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

var File_gobonsai_proto protoreflect.FileDescriptor

var file_gobonsai_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x67, 0x6f, 0x62, 0x6f, 0x6e, 0x73, 0x61, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x67, 0x6f, 0x62, 0x6f, 0x6e, 0x73, 0x61, 0x69, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x23, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x75, 0x6d, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x6d, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x75, 0x6d, 0x70, 0x49, 0x64,
	0x22, 0x28, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x75, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xa2, 0x01, 0x0a, 0x0f, 0x47,
	0x6f, 0x42, 0x6f, 0x6e, 0x73, 0x61, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x75, 0x6d, 0x70, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x6f,
	0x62, 0x6f, 0x6e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x75, 0x6d, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6f, 0x62, 0x6f, 0x6e, 0x73,
	0x61, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x75, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x62, 0x6f, 0x6e, 0x73,
	0x61, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x62, 0x6f, 0x6e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gobonsai_proto_rawDescOnce sync.Once
	file_gobonsai_proto_rawDescData = file_gobonsai_proto_rawDesc
)

func file_gobonsai_proto_rawDescGZIP() []byte {
	file_gobonsai_proto_rawDescOnce.Do(func() {
		file_gobonsai_proto_rawDescData = protoimpl.X.CompressGZIP(file_gobonsai_proto_rawDescData)
	})
	return file_gobonsai_proto_rawDescData
}

var file_gobonsai_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gobonsai_proto_goTypes = []interface{}{
	(*ListSensorRequest)(nil), // 0: gobonsai.ListSensorRequest
	(*SensorValue)(nil),       // 1: gobonsai.SensorValue
	(*StopPumpsRequest)(nil),  // 2: gobonsai.StopPumpsRequest
	(*StopPumpsReply)(nil),    // 3: gobonsai.StopPumpsReply
}
var file_gobonsai_proto_depIdxs = []int32{
	2, // 0: gobonsai.GoBonsaiService.StopPumps:input_type -> gobonsai.StopPumpsRequest
	0, // 1: gobonsai.GoBonsaiService.ListSensorValues:input_type -> gobonsai.ListSensorRequest
	3, // 2: gobonsai.GoBonsaiService.StopPumps:output_type -> gobonsai.StopPumpsReply
	1, // 3: gobonsai.GoBonsaiService.ListSensorValues:output_type -> gobonsai.SensorValue
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gobonsai_proto_init() }
func file_gobonsai_proto_init() {
	if File_gobonsai_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gobonsai_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSensorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gobonsai_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gobonsai_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPumpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gobonsai_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPumpsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gobonsai_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gobonsai_proto_goTypes,
		DependencyIndexes: file_gobonsai_proto_depIdxs,
		MessageInfos:      file_gobonsai_proto_msgTypes,
	}.Build()
	File_gobonsai_proto = out.File
	file_gobonsai_proto_rawDesc = nil
	file_gobonsai_proto_goTypes = nil
	file_gobonsai_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GoBonsaiServiceClient is the client API for GoBonsaiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoBonsaiServiceClient interface {
	StopPumps(ctx context.Context, in *StopPumpsRequest, opts ...grpc.CallOption) (*StopPumpsReply, error)
	ListSensorValues(ctx context.Context, in *ListSensorRequest, opts ...grpc.CallOption) (GoBonsaiService_ListSensorValuesClient, error)
}

type goBonsaiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoBonsaiServiceClient(cc grpc.ClientConnInterface) GoBonsaiServiceClient {
	return &goBonsaiServiceClient{cc}
}

func (c *goBonsaiServiceClient) StopPumps(ctx context.Context, in *StopPumpsRequest, opts ...grpc.CallOption) (*StopPumpsReply, error) {
	out := new(StopPumpsReply)
	err := c.cc.Invoke(ctx, "/gobonsai.GoBonsaiService/StopPumps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBonsaiServiceClient) ListSensorValues(ctx context.Context, in *ListSensorRequest, opts ...grpc.CallOption) (GoBonsaiService_ListSensorValuesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GoBonsaiService_serviceDesc.Streams[0], "/gobonsai.GoBonsaiService/ListSensorValues", opts...)
	if err != nil {
		return nil, err
	}
	x := &goBonsaiServiceListSensorValuesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoBonsaiService_ListSensorValuesClient interface {
	Recv() (*SensorValue, error)
	grpc.ClientStream
}

type goBonsaiServiceListSensorValuesClient struct {
	grpc.ClientStream
}

func (x *goBonsaiServiceListSensorValuesClient) Recv() (*SensorValue, error) {
	m := new(SensorValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoBonsaiServiceServer is the server API for GoBonsaiService service.
type GoBonsaiServiceServer interface {
	StopPumps(context.Context, *StopPumpsRequest) (*StopPumpsReply, error)
	ListSensorValues(*ListSensorRequest, GoBonsaiService_ListSensorValuesServer) error
}

// UnimplementedGoBonsaiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGoBonsaiServiceServer struct {
}

func (*UnimplementedGoBonsaiServiceServer) StopPumps(context.Context, *StopPumpsRequest) (*StopPumpsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPumps not implemented")
}
func (*UnimplementedGoBonsaiServiceServer) ListSensorValues(*ListSensorRequest, GoBonsaiService_ListSensorValuesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSensorValues not implemented")
}

func RegisterGoBonsaiServiceServer(s *grpc.Server, srv GoBonsaiServiceServer) {
	s.RegisterService(&_GoBonsaiService_serviceDesc, srv)
}

func _GoBonsaiService_StopPumps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPumpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBonsaiServiceServer).StopPumps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobonsai.GoBonsaiService/StopPumps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBonsaiServiceServer).StopPumps(ctx, req.(*StopPumpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBonsaiService_ListSensorValues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSensorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoBonsaiServiceServer).ListSensorValues(m, &goBonsaiServiceListSensorValuesServer{stream})
}

type GoBonsaiService_ListSensorValuesServer interface {
	Send(*SensorValue) error
	grpc.ServerStream
}

type goBonsaiServiceListSensorValuesServer struct {
	grpc.ServerStream
}

func (x *goBonsaiServiceListSensorValuesServer) Send(m *SensorValue) error {
	return x.ServerStream.SendMsg(m)
}

var _GoBonsaiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gobonsai.GoBonsaiService",
	HandlerType: (*GoBonsaiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopPumps",
			Handler:    _GoBonsaiService_StopPumps_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSensorValues",
			Handler:       _GoBonsaiService_ListSensorValues_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gobonsai.proto",
}
